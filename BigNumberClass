import java.util.*;

public class BigNumber {
	//Stores the BigNumber
	private LinkedList<Integer> holster;
	
	//Constructor: Accepts BigNumber as a string, and loads into LinkedList
	public BigNumber(String numberAsString) {
		holster = new LinkedList<Integer>();
		loadNumber(numberAsString);
	}

	//Overloaded Constructor: Assigns in an existing LinkedList
	public BigNumber(LinkedList<Integer> number) {
		holster = number;
	}

	//Assumes a positive BigNumber to be loaded in; pads with a 0 at front
	//Iterates from right to left to push each number individually into LinkedList
	private void loadNumber(String numberAsString) {
		int currentNum;
		for(int i = numberAsString.length()-1; i > -1; i--)
		{
			currentNum= Character.getNumericValue(numberAsString.charAt(i));
			holster.push(currentNum);
		}
		holster.push(0);
	}

	//Returns the LinkedList used to store BigNumber
	public LinkedList<Integer> getHolster() {
		return holster;
	}
	
	
	//Negates the current BigNumber; Works from reading right to left
	//Reassigns the equivalent (negated) number to LinkedList
	public BigNumber negate()
	{
		LinkedList<Integer> newHolster = new LinkedList<Integer>();
		int currentNum;
		boolean start = false;
		for (int i = holster.size() - 1; i > -1; i--) {
			currentNum = holster.get(i);
			if (currentNum == 0 && start == false) {
				newHolster.push(currentNum);
			} else {
				if (start == false) {
					newHolster.push(10 - currentNum);
					start = true;
				} else {
					newHolster.push(9 - currentNum);
				}
			}
		}
		//BigNumber result = new BigNumber(newHolster);
		//result.normalize();
		//return result;
		return new BigNumber(newHolster);
	}
	
	//Check for positive or negative, denoted by the leading digit
	//Positive returns 1, Negative returns -1
	public int sign()
	{
		int n = holster.peek();
		if(n < 5)
			return 1;
		else
			return -1;
	}
	
	//Convert the LinkedList into a string and return the string
	//Negative added for negative numbers, (0 or 9 front padding not included)
	public String toString()
	{
		ListIterator<Integer> itr = holster.listIterator(1);
		String message = "";
		if(sign() == -1)
		{
			message = message +"-";
			itr = this.negate().getHolster().listIterator(1);
		}
		while(itr.hasNext())
			message = message + itr.next();
		return message;
	}
	
	//Check to see if the numbers are equal
	//Takes in another BigNumber to check against
	//Return false at the first difference found, if none, returns true
	public boolean equals(BigNumber number)
	{
		this.normalize();
		number.normalize();
		ListIterator<Integer> itr = holster.listIterator();
		ListIterator<Integer> numIter = number.getHolster().listIterator();
		while(itr.hasNext() && numIter.hasNext())
		{
			if(itr.next() != numIter.next())
				return false;
		}
		return true;		
	}
	
	//Adds BigNumber passed in to this BigNumber
	//Returns new BigNumber sum
	public BigNumber add(BigNumber num)
	{
		LinkedList<Integer> result = new LinkedList<Integer>();
		
		this.normalize();
		num.normalize();
		
//		if(this.sign() == -1 && num.sign() == 1)
//		{
//			return num.subtract(this.negate());
//		}

		int holsterLength = holster.size();
		int numLength = num.getHolster().size();
		int maxLength = Math.max(holsterLength, numLength);
		int difference = Math.abs(holsterLength-numLength);
		
		int sum = 0;
		int carry = 0;
		
		//Add necessary padding if both BigNumbers are different lengths
		//If the number is positive, add leading 0s
		//If the number is negative, add leading 9s
		if (maxLength == holsterLength)
		{
			for (int i = 0; i < difference; i++)
			{
				if (num.sign() == -1)
				{
					num.getHolster().addFirst(9);
				}
				else
				{
					num.getHolster().addFirst(0);
				}
			}
		}
		else if (maxLength == numLength)
		{
			for (int i = 0; i < difference; i++)
			{
				if (this.sign() == -1)
				{
					holster.addFirst(9);
				}
				else
				{
					holster.addFirst(0);
				}
			}
		}
		
		//Extra pad in case of additional carry over
		if (this.sign() == -1)
		{
			holster.addFirst(9);
		}
		else
		{
			holster.addFirst(0);
		}
		if (num.sign() == -1)
		{
			num.getHolster().addFirst(9);
		}
		else
		{
			num.getHolster().addFirst(0);
		}
				
		//Add the digits that are in the same place and the carry if there was
		//one. Add the carry to the next set of digits if necessary.
		for (int i = maxLength; i >= 0; i--)
		{
			sum = holster.get(i) + num.getHolster().get(i) + carry;

			if (sum < 10)
			{
				carry = 0;
				result.addFirst(sum);
			}
			else
			{
				carry = 1;
				result.addFirst(sum%10);
			}
		}
		
		BigNumber added = new BigNumber(result);
		added.normalize();
		
		return added;
	}
	
	//Subtracts BigNumber passed in from the this BigNumber
	//Returns new BigNumber difference
	public BigNumber subtract(BigNumber num)
	{
		BigNumber result;
//		if(this.sign() == -1)
//		{
//			this.negate();
//			num.negate();
//			
//			result = this.add(num);
//			result.negate();
//		}
//		else
		{
		result = this.add(num.negate());
		result.normalize();
		}
		return result;
//		boolean negativeExpected = false;
//		
//		if (this.compareTo(num) < 0)
//		{
//			negativeExpected = true;
//		}
//		
//		BigNumber result = this.add(num.negate());
//		
//		if (negativeExpected)
//		{
//			result = result.negate();
//			result.getHolster().addFirst(9);
//			return result;
//		}
//		else
//		{
//			return result;
//		}
	}
	
	//Divides this BigNumber with the BigNumber passed in
	//Returns new BigNumber quotient
	//Temporarily dividing by repeated subtraction
	public BigNumber divide(BigNumber num)
	{
		this.normalize();
		num.normalize();
		
		int count = 0;
		BigNumber temp = this;
		
		while (temp.compareTo(num) >= 0)
		{
			temp = temp.subtract(num);
			count++;
		}
		
		return new BigNumber(""+count);
	}
	
	//Normalize BigNumber padding (Remove excess 0/9s that show pos or neg)
	public void normalize()
	{	
		boolean keepGoing = true;
		ListIterator<Integer> itr = holster.listIterator();
		int getPad = itr.next();
		while(itr.hasNext() && keepGoing)
		{
			if(getPad == itr.next() && itr.hasNext())
				itr.remove();
			else
				keepGoing = false;
		}

	}
	
	//Check the BigNumbers and return 1 if greater, 0 if equal, -1 if less
	public int compareTo(BigNumber number)
	{
		this.normalize();
		number.normalize();
		
		BigNumber compare;
		
		if(this.equals(number))
			return 0;
		else{
			if(this.sign() == -1 && number.sign() == -1)
				compare = this.negate().subtract(number.negate());
			else
				compare = this.subtract(number);
			if(compare.sign() == 1)
				return 1;
			else if(compare.sign() == -1)
				return -1;
		}
		return 0;
		
//		//If positive vs negative, positive is greater
//		if(this.sign() == 1 && number.sign() == -1)
//			return 1;
//		//If negative vs positive, negative is less
//		if(this.sign() == -1 && number.sign() == 1)
//			return -1;
//		
//		//Same sign but different sizes
//		//If positive, larger size is greater
//		if((holster.size() > number.getHolster().size()) && sign() == 1)
//			return 1;
//		//If positive, smaller size is not greater
//		if((holster.size() < number.getHolster().size()) && sign() == 1)
//			return -1;
//		//If negative, smaller size is greater
//		if((holster.size() < number.getHolster().size()) && sign() == -1)
//			return 1;
//		//If negative, bigger size is not greater
//		if((holster.size() > number.getHolster().size()) && sign() == -1)
//			return -1;
//		
//		ListIterator<Integer> itr = holster.listIterator(1);
//		ListIterator<Integer> numIter = number.getHolster().listIterator(1);
//		//The BigNumbers have the same sign and size (both positive or both negative)
//		//Start checking, position vs position
//		while(itr.hasNext() && numIter.hasNext())
//		{
//			int thisNum = itr.next();
//			int thatNum = numIter.next();
//			//Positive numbers: high number means greater
//			if((thisNum > thatNum) && sign() == 1)
//				return 1;
//			if((thisNum < thatNum) && sign() == 1)
//				return -1;
//			
//			//Negative numbers: lower number means less negative (greater)
//			if((thisNum < thatNum) && sign() == -1)
//				return 1;
//			if((thisNum > thatNum) && sign() == -1)
//				return -1;
//		}
//		//All cases fail: Equal
//		return 0;
		
	}
	
	//TODO Normalize when a new BigNumber is created (i.e. from arithmetic)
	//Use normalize before arithmetic to reduce operations; eliminate excessive leading 0/9s
	
	// Multiplies this BigNumber with the BigNumber passed in
	// Returns new BigNumber product
	// Temporarily multiplying by repeated addition
	public BigNumber multiply(BigNumber num) {
		BigNumber result = this;
		BigNumber zero = new BigNumber("0");
		BigNumber one = new BigNumber("1");
		result.normalize();
		zero.normalize();
		num.normalize();
		while (num.compareTo(zero) >= 0) {
			result = result.add(this);
			num.subtract(one);
		}

		return result;
	}

	// Divides this BigNumber with the BigNumber passed in
	// Returns new BigNumber quotient
	// Temporarily dividing by repeated subtraction
	@SuppressWarnings("unchecked")
	public BigNumber divide(BigNumber divisor) {
		this.normalize();
		divisor.normalize();

		BigNumber dividend = new BigNumber("0");
		LinkedList<Integer> thisNumber = (LinkedList<Integer>) this
				.getHolster().clone();
		LinkedList<Integer> temp = new LinkedList<Integer>();

		String answer = "";
		int lengthOfAnswer = 0;

		while (divisor.compareTo(dividend) > 0) {
			temp.add(thisNumber.pop());
			dividend = new BigNumber(temp);
			lengthOfAnswer--;
		}
		lengthOfAnswer += this.getSize();

		for (int count = divisor.getSize() - 1; count < this.getSize(); count++) {
			int remainder = 0;
			while (dividend.compareTo(divisor) >= 0) {
				dividend = dividend.subtract(divisor);
				remainder++;
			}
			if (remainder != 0)
				answer += remainder;
			temp = dividend.getHolster();
			for (int i = 1; divisor.compareTo(dividend) > 0
					&& thisNumber.peek() != null; i++) {
				if (i > 1)
					answer += 0;
				temp.add(thisNumber.pop());
				dividend = new BigNumber(temp);
			}
			dividend.normalize();
		}

		while (answer.length() <= lengthOfAnswer) {
			answer += 0;
		}

		return new BigNumber(answer);
	}

	@SuppressWarnings("unchecked")
	public ArrayList<BigNumber> addFactor(BigNumber divisor,
			ArrayList<BigNumber> factorList) {
		this.normalize();
		divisor.normalize();

		BigNumber dividend = new BigNumber("0");
		LinkedList<Integer> thisNumber = (LinkedList<Integer>) this
				.getHolster().clone();
		LinkedList<Integer> temp = new LinkedList<Integer>();

		String answer = "";
		int lengthOfAnswer = 0;

		while (divisor.compareTo(dividend) > 0) {
			temp.add(thisNumber.pop());
			dividend = new BigNumber(temp);
			lengthOfAnswer--;
		}

		lengthOfAnswer += this.getSize();

		for (int count = divisor.getSize() - 1; count < this.getSize(); count++) {
			int remainder = 0;
			while (dividend.compareTo(divisor) >= 0) {
				dividend = dividend.subtract(divisor);
				remainder++;
			}
			if (remainder != 0)
				answer += remainder;
			temp = dividend.getHolster();
			for (int i = 1; divisor.compareTo(dividend) > 0
					&& thisNumber.peek() != null; i++) {
				if (i > 1)
					answer += 0;
				temp.add(thisNumber.pop());
				dividend = new BigNumber(temp);
			}
			dividend.normalize();
		}

		while (answer.length() <= lengthOfAnswer) {
			answer += 0;
		}

		BigNumber quotient = new BigNumber(answer);
		if (quotient.compareTo(divisor) == 0) {
			factorList.add(factorList.size() / 2, quotient);
		} else {
			factorList.add((factorList.size() / 2), divisor);
			factorList.add((factorList.size() / 2) + 1, quotient);
		}

		return factorList;
	}

	// calculates all factors of the given BigNumber and
	// returns a list of such factors
	public ArrayList<BigNumber> factors() {
		ArrayList<BigNumber> factorList = new ArrayList<BigNumber>();
		this.normalize();
		boolean neg = false;
		if (this.sign() == -1) {
			this.negate();
			neg = true;
		}
		// Attempts to estimate the square root of this BigNumber
		int value = (int) (Math.pow(4, (this.getHolster().size() / 2)));
		BigNumber tempNum = divide(new BigNumber("" + value));
		// Calculates sum of square root estimation
		LinkedList<Integer> reverse = new LinkedList<Integer>();
		LinkedList<Integer> temp = tempNum.getHolster();
		while (temp.peek() != null) {
			reverse.push(temp.pop());
		}
		int size = reverse.size();
		long sum = 0;
		for (int tensCount = 0; tensCount < size; tensCount++) {
			sum += reverse.pop() * Math.pow(10, tensCount);
		}
		// checks for factors
		BigNumber lowFactor;
		for (int i = 1; i <= sum; i++) {
			lowFactor = new BigNumber("" + i);
			factorList = addFactor(lowFactor, factorList);
		}
		return factorList;
	}
	
}
